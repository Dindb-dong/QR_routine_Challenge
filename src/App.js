import React, { useEffect, useState } from 'react';
import './App.css';
// import { 
//   initializeNotifications, 
//   setupNextDayNotificationAfterCheck,
//   requestNotificationPermission,
//   sendTestNotification,
//   sendSimpleNotification,
//   forceRefreshServiceWorker,
//   checkNotificationSettings,
//   unsubscribeFromPushNotifications // Ï∂îÍ∞Ä
// } from './pushNotification';

// Ïù∏ÌÑ∞ÎÑ∑ ÏãúÍ∞Ñ(NTP API) Í∞ÄÏ†∏Ïò§Í∏∞
async function fetchInternetDate(maxRetries = 10, retryDelay = 2000, onAttempt) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    if (onAttempt) onAttempt(attempt);
    try {
      const worldtime = fetch('https://worldtimeapi.org/api/timezone/Asia/Seoul')
        .then(res => res.ok ? res.json() : Promise.reject())
        .then(data => {
          console.log('worldtimeapi.org', data);
          return data.datetime.slice(0, 10);
        });

      const timeapi = fetch('https://timeapi.io/api/Time/current/zone?timeZone=Asia/Seoul')
        .then(res => res.ok ? res.json() : Promise.reject())
        .then(data => {
          console.log('timeapi.io', data);
          if (data.year && data.month && data.day) {
            return `${data.year}-${String(data.month).padStart(2, '0')}-${String(data.day).padStart(2, '0')}`;
          }
          throw new Error();
        });

      const result = await Promise.race([
        worldtime.catch(() => Promise.reject()),
        timeapi.catch(() => Promise.reject())
      ]);
      return result;
    } catch (e) {
      const finalTime = new Date().toISOString().slice(0, 10);
      console.log(`date fetch failed (attempt ${attempt}/${maxRetries}), retrying in 2s. Using local time for now:`, finalTime);
      if (attempt < maxRetries) {
        await new Promise(resolve => setTimeout(resolve, retryDelay));
      } else {
        return finalTime;
      }
    }
  }
}

const STAMP_KEY = 'night_routine_stamps_v6';
const CHALLENGE_FAILED_KEY = 'night_routine_challenge_failed_v6';

function getMonthMatrix(year, month) {
  // month: 0-indexed
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const startDay = firstDay.getDay(); // 0:Ïùº~6:ÌÜ†
  const daysInMonth = lastDay.getDate();
  const matrix = [];
  let week = Array(startDay).fill(null);
  for (let d = 1; d <= daysInMonth; d++) {
    week.push(d);
    if (week.length === 7) {
      matrix.push(week);
      week = [];
    }
  }
  if (week.length) matrix.push([...week, ...Array(7 - week.length).fill(null)]);
  return matrix;
}

// ÎÇ†Ïßú ÎπÑÍµê Ìï®Ïàò (YYYY-MM-DD ÌòïÏãù)
function isConsecutive(date1, date2) {
  const d1 = new Date(date1);
  const d2 = new Date(date2);
  const diffTime = Math.abs(d2 - d1);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays === 1;
}

// Í∞ÄÏû• ÏµúÍ∑º Ï∂úÏÑù ÎÇ†Ïßú Ï∞æÍ∏∞
function getLastAttendanceDate(stamps) {
  if (stamps.length === 0) return null;
  return stamps.slice().sort((a, b) => a.date.localeCompare(b.date)).pop();
}

// Í∏∞Í∏∞/Î∏åÎùºÏö∞Ï†Ä Í∞êÏßÄ Ìï®Ïàò
// function getDeviceAlertMessage() {
//   const ua = navigator.userAgent;
//   if (/iPhone|iPad|iPod/.test(ua) && /Safari/.test(ua) && !/CriOS|FxiOS/.test(ua)) {
//     // iOS ÏÇ¨ÌååÎ¶¨
//     return "iOS ÏÇ¨ÌååÎ¶¨ÏóêÏÑúÎäî ÌéòÏù¥ÏßÄ ÌïòÎã®Ïùò 'Í≥µÏú†' Î≤ÑÌäº ÌÅ¥Î¶≠ ÌõÑ,\nÏõπÏÇ¨Ïù¥Ìä∏Î•º 'Ìôà ÌôîÎ©¥Ïóê Ï∂îÍ∞Ä'Ìïú ÌõÑ ÏïåÎ¶ºÏùÑ ÌóàÏö©Ìï¥Ïïº \nÌë∏Ïãú ÏïåÎ¶ºÏùÑ Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.";
//   } else if (/SamsungBrowser/.test(ua)) {
//     // ÏÇºÏÑ± Ïù∏ÌÑ∞ÎÑ∑ Î∏åÎùºÏö∞Ï†Ä
//     return "ÏÇºÏÑ± Ïù∏ÌÑ∞ÎÑ∑ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑúÎäî Ïö∞Ï∏° ÌïòÎã®Ïùò ÏÑ§Ï†ï > ÏïåÎ¶ºÏóêÏÑú ÏïåÎ¶ºÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.";
//   } else if (/Android/.test(ua) && /Chrome/.test(ua)) {
//     // ÏïàÎìúÎ°úÏù¥Îìú ÌÅ¨Î°¨
//     return "ÏïàÎìúÎ°úÏù¥Îìú ÌÅ¨Î°¨ÏóêÏÑúÎäî Î∏åÎùºÏö∞Ï†Ä ÏÑ§Ï†ï > ÏÇ¨Ïù¥Ìä∏ ÏÑ§Ï†ï > ÏïåÎ¶ºÏóêÏÑú ÏïåÎ¶ºÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.";
//   } else {
//     // Í∏∞ÌÉÄ
//     return "ÏÇ¨Ïö©ÌïòÏãúÎäî Î∏åÎùºÏö∞Ï†ÄÏùò ÏïåÎ¶º ÏÑ§Ï†ïÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.";
//   }
// }

// Ïä§ÌÉ¨ÌîÑ Í∞ùÏ≤¥ ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ìï®Ïàò
function migrateStamps(stamps) {
  return stamps.map(s => {
    if (typeof s === 'string') {
      return { date: s, hour: '00', minute: '00' };
    }
    return s;
  });
}

function App() {
  const [stamps, setStamps] = useState([]); // ['YYYY-MM-DD', ...]
  const [today, setToday] = useState('');
  const [viewYear, setViewYear] = useState(0);
  const [viewMonth, setViewMonth] = useState(0); // 0-indexed
  const [loading, setLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [confetti, setConfetti] = useState([]);
  const [buttonClicked, setButtonClicked] = useState(false);
  const [challengeFailed, setChallengeFailed] = useState(false);
  const [showEntryModal, setShowEntryModal] = useState(false);
  const [entryPhone, setEntryPhone] = useState('');
  const [showEntrySuccess, setShowEntrySuccess] = useState(false);
  //const [notificationPermission, setNotificationPermission] = useState('default');
  const [fetchAttempt, setFetchAttempt] = useState(1);

  // ÎÇ†Ïßú Î∂àÎü¨Ïò§Í∏∞ Î∞è Ï¥àÍ∏∞ Ïõî ÏÑ§Ï†ï
  useEffect(() => {
    // Service WorkerÍ∞Ä ÌòÑÏû¨ ÌéòÏù¥ÏßÄÎ•º Ï†úÏñ¥ÌïòÏßÄ ÏïäÏúºÎ©¥ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® (ÏµúÏ¥à 1ÌöåÎßå)
    if ('serviceWorker' in navigator) {
      if (!navigator.serviceWorker.controller && !localStorage.getItem('sw_auto_reloaded')) {
        localStorage.setItem('sw_auto_reloaded', '1');
        window.location.reload();
      }
    }
    fetchInternetDate(10, 2000, setFetchAttempt).then(date => {
      setToday(date);
      const [y, m] = date.split('-');
      setViewYear(Number(y));
      setViewMonth(Number(m) - 1);
      setLoading(false);
    });
    let saved = JSON.parse(localStorage.getItem(STAMP_KEY) || '[]');
    saved = migrateStamps(saved);
    localStorage.setItem(STAMP_KEY, JSON.stringify(saved));
    const failed = localStorage.getItem(CHALLENGE_FAILED_KEY) === 'true';
    setStamps(saved);
    setChallengeFailed(failed);
    // ÏïåÎ¶º Í∂åÌïú ÌôïÏù∏ Î∞è Ï¥àÍ∏∞Ìôî (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå)
    // if (process.env.NODE_ENV !== 'production') {
    //   initializeNotifications().then(hasPermission => {
    //     setNotificationPermission(hasPermission ? 'granted' : 'denied');
    //   });
    // }
  }, []);

  // Ïª®ÌéòÌã∞ ÏÉùÏÑ± Ìï®Ïàò
  const createConfetti = () => {
    const confettiTypes = ['circle', 'square', 'triangle', 'star'];
    const colors = ['#ff6b9d', '#ff8fab', '#ffb3c7', '#ffd1dc', '#ffd700'];
    const newConfetti = [];
    
    for (let i = 0; i < 30; i++) {
      const type = confettiTypes[Math.floor(Math.random() * confettiTypes.length)];
      const color = colors[Math.floor(Math.random() * colors.length)];
      const left = Math.random() * 100;
      const delay = Math.random() * 0.5;
      const duration = 2 + Math.random() * 2;
      
      newConfetti.push({
        id: Date.now() + i,
        type,
        color,
        left: `${left}%`,
        delay: `${delay}s`,
        duration: `${duration}s`
      });
    }
    
    setConfetti(newConfetti);
    
    // 3Ï¥à ÌõÑ Ïª®ÌéòÌã∞ Ï†úÍ±∞
    setTimeout(() => {
      setConfetti([]);
    }, 3000);
  };

  // Ï∂úÏÑùÏ≤¥ÌÅ¨
  const handleCheck = () => {
    if (!today) return;
    
    // Ïù¥ÎØ∏ Ïã§Ìå®Ìïú Í≤ΩÏö∞
    if (challengeFailed) {
      setMessage('Ïã§Ìå®Ìïú Î£®Ìã¥ Ï±åÎ¶∞ÏßÄÏûÖÎãàÎã§ „Ö†„Ö†');
      return;
    }
    
    // Ïù¥ÎØ∏ Ïò§Îäò Ï∂úÏÑùÌïú Í≤ΩÏö∞
    if (stamps.some(s => s.date === today)) {
      setMessage('Ïò§ÎäòÏùÄ Ïù¥ÎØ∏ Ï∂úÏÑùÏ≤¥ÌÅ¨Î•º ÌïòÏÖ®ÏäµÎãàÎã§!');
      return;
    }
    
    const lastAttendance = getLastAttendanceDate(stamps);
    
    // Ï≤´ Ï∂úÏÑùÏù¥Í±∞ÎÇò Ïó∞ÏÜç Ï∂úÏÑùÏù∏ Í≤ΩÏö∞
    if (!lastAttendance || isConsecutive(lastAttendance.date, today)) {
      // Î≤ÑÌäº Ìå° Ìö®Í≥º
      setButtonClicked(true);
      setTimeout(() => setButtonClicked(false), 600);
      
      // Ïª®ÌéòÌã∞ Ïï†ÎãàÎ©îÏù¥ÏÖò
      createConfetti();
      const now = new Date();
      const stampObj = {
        date: today,
        hour: String(now.getHours()).padStart(2, '0'),
        minute: String(now.getMinutes()).padStart(2, '0')
      };
      const existingStamps = migrateStamps(JSON.parse(localStorage.getItem(STAMP_KEY) || '[]'));
      const updated = [...existingStamps, stampObj];
      setStamps(updated);
      console.log('updated', updated);
      localStorage.setItem(STAMP_KEY, JSON.stringify(updated));
      setMessage('Ï∂úÏÑùÏ≤¥ÌÅ¨ ÏôÑÎ£å! üéâ');
      
      // Îã§Ïùå ÎÇ† ÏïåÎ¶º ÏÑ§Ï†ï
      // setupNextDayNotificationAfterCheck(stampObj);
    } else {
      // Ïó∞ÏÜç Ï∂úÏÑùÏù¥ ÎÅäÏñ¥ÏßÑ Í≤ΩÏö∞ - Ï±åÎ¶∞ÏßÄ Ïã§Ìå®
      setChallengeFailed(true);
      localStorage.setItem(CHALLENGE_FAILED_KEY, 'true');
      setMessage('Î£®Ìã¥ Ï±åÎ¶∞ÏßÄÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§... Îã§Ïùå Í∏∞ÌöåÏóê Î¥êÏöî! üò¢');
    }
  };

  // Ïõî Ïù¥Îèô
  const moveMonth = (diff) => {
    let y = viewYear;
    let m = viewMonth + diff;
    if (m < 0) { y -= 1; m = 11; }
    if (m > 11) { y += 1; m = 0; }
    setViewYear(y);
    setViewMonth(m);
    setMessage('');
  };

  // Îã¨Î†• Îç∞Ïù¥ÌÑ∞
  const matrix = getMonthMatrix(viewYear, viewMonth);
  const monthStr = `${viewYear}ÎÖÑ ${viewMonth + 1}Ïõî`;
  const weekDays = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];

  // Ïò§Îäò ÎÇ†Ïßú(YYYY-MM-DD)ÏôÄ Îã¨Î†•Ïùò ÎÇ†Ïßú(Ïà´Ïûê)Î•º ÎπÑÍµêÌï¥ Ïò§Îäò ÌëúÏãú
  const isToday = (d) => {
    if (!d) return false;
    const mm = String(viewMonth + 1).padStart(2, '0');
    const dd = String(d).padStart(2, '0');
    const dateStr = `${viewYear}-${mm}-${dd}`;
    return today === dateStr;
  };

  // Ìï¥Îãπ ÎÇ†ÏßúÏóê Ïä§ÌÉ¨ÌîÑÍ∞Ä ÏûàÎäîÏßÄ
  const hasStamp = (d) => {
    if (!d) return false;
    const mm = String(viewMonth + 1).padStart(2, '0');
    const dd = String(d).padStart(2, '0');
    const dateStr = `${viewYear}-${mm}-${dd}`;
    return stamps.some(s => s.date === dateStr);
  };

  // Ïò§Îäò Ï∂úÏÑù Ïó¨Î∂Ä
  const checkedToday = stamps.some(s => s.date === today);

  // 14Í∞ú Ïù¥ÏÉÅ Ïä§ÌÉ¨ÌîÑ Ï°∞Í±¥
  const canShowEntry = !challengeFailed && stamps.length >= 1;

  // ÏùëÎ™® ÏôÑÎ£å Ìï∏Îì§Îü¨
  const handleEntrySubmit = (e) => {
    e.preventDefault();
    if (!entryPhone || entryPhone.length !== 11) return;
    setShowEntryModal(false);
    setEntryPhone('');
    setShowEntrySuccess(true);
    // Ïã§Ï†úÎ°úÎäî ÏÑúÎ≤ÑÎ°ú Ï†ÑÌôîÎ≤àÌò∏Î•º Ï†ÑÏÜ°ÌïòÎäî Î°úÏßÅÏù¥ Îì§Ïñ¥Í∞à Ïàò ÏûàÏùå
  };

  // ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠ Ìï∏Îì§Îü¨
  // const handleRequestNotificationPermission = async () => {
  //   // Í∏∞Í∏∞Î≥Ñ ÏïàÎÇ¥ Î©îÏãúÏßÄ alert
  //   alert(getDeviceAlertMessage());
  //   const hasPermission = await requestNotificationPermission();
  //   setNotificationPermission(hasPermission ? 'granted' : 'denied');
  // };

  // ÌÖåÏä§Ìä∏ ÏïåÎ¶º Ï†ÑÏÜ° Ìï∏Îì§Îü¨
  // const handleTestNotification = async () => {
  //   await sendTestNotification();
  // };

  // Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ ÏïåÎ¶º Ìï∏Îì§Îü¨
  // const handleSimpleNotification = () => {
  //   sendSimpleNotification();
  // };

  // Service Worker ÏÉàÎ°úÍ≥†Ïπ® Ìï∏Îì§Îü¨
  // const handleRefreshServiceWorker = async () => {
  //   const success = await forceRefreshServiceWorker();
  //   if (success) {
  //     setMessage('Service WorkerÍ∞Ä ÏÉàÎ°úÍ≥†Ïπ®ÎêòÏóàÏäµÎãàÎã§!');
  //   } else {
  //     setMessage('Service Worker ÏÉàÎ°úÍ≥†Ïπ®Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
  //   }
  // };

  // ÏïåÎ¶º ÏÑ§Ï†ï ÌôïÏù∏ Ìï∏Îì§Îü¨
  // const handleCheckNotificationSettings = async () => {
  //   const settings = await checkNotificationSettings();
  //   console.log('ÏïåÎ¶º ÏÑ§Ï†ï ÏÉÅÌÉú:', settings);
  //   setMessage(`ÏïåÎ¶º ÏÑ§Ï†ï ÌôïÏù∏ ÏôÑÎ£å! Í∂åÌïú: ${settings.permission}, SW: ${settings.serviceWorker ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}`);
  // };

  // Î°úÏª¨ Ïä§ÌÉ¨ÌîÑ Ï†ïÎ≥¥ Ï∂úÎ†• Ìï∏Îì§Îü¨
  const handleShowLocalStamps = () => {
    const stamps = localStorage.getItem(STAMP_KEY);
    alert(stamps ? stamps : 'Ïä§ÌÉ¨ÌîÑ Ï†ïÎ≥¥ ÏóÜÏùå');
  };

  // ÏïåÎ¶º Í±∞Î∂Ä Ìï∏Îì§Îü¨
  // const handleUnsubscribeNotifications = async () => {
  //   await unsubscribeFromPushNotifications();
  //   setNotificationPermission('denied');
  //   setMessage('ÏïåÎ¶ºÏù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.');
  // };

  // Ïò§Îäò Ï∂úÏÑù ÏÇ≠Ï†ú Ìï∏Îì§Îü¨
  const handleRemoveTodayStamp = () => {
    let stamps = JSON.parse(localStorage.getItem(STAMP_KEY) || '[]');
    stamps = migrateStamps(stamps).filter(s => s.date !== today);
    localStorage.setItem(STAMP_KEY, JSON.stringify(stamps));
    setStamps(stamps);
    setMessage('Ïò§Îäò Ï∂úÏÑù Ïä§ÌÉ¨ÌîÑÍ∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
  };

  // ÎÇ†Ïßú Ï†ïÎ≥¥Í∞Ä Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Îã¨Î†• Î†åÎçîÎßÅ X
  if (
    loading ||
    !today ||
    isNaN(viewYear) || viewYear < 1900 ||
    isNaN(viewMonth) || viewMonth < 0 || viewMonth > 11
  ) {
    return (
      <div className="App">
        <header className="App-header">
          <div className="loading">
            <img src="/poami_bounce.gif" alt="Î°úÎî© Ï§ë" style={{ width: 120, marginBottom: 16 }} />
            Î°úÎî© Ï§ë...<br/>
            {`Ïù∏ÌÑ∞ÎÑ∑ ÏãúÍ∞Ñ Î∂àÎü¨Ïò§Îäî Ï§ë (${fetchAttempt}/10)`}
            <br/>Ï°∞Í∏à Ïò§Îûò Í±∏Î†§ÎèÑ Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî!
          </div>
        </header>
      </div>
    );
  }

  return (
    <div className={`App ${challengeFailed ? 'challenge-failed' : ''}`}>
      {/* Ïª®ÌéòÌã∞ Ïï†ÎãàÎ©îÏù¥ÏÖò */}
      {confetti.map((piece) => (
        <div
          key={piece.id}
          className={`confetti ${piece.type}`}
          style={{
            left: piece.left,
            animationDelay: piece.delay,
            animationDuration: piece.duration,
            background: piece.color
          }}
        />
      ))}
      
      <header className="App-header">
        <div className="month-title-wrapper">
          <h3 className="month-title">{monthStr} Î£®Ìã¥ Ï∫òÎ¶∞Îçî</h3>
          <img src="/sheep.png" alt="sheep" className="month-title-sheep" />
        </div>
        
        {/* Ïã§Ìå® ÏÉÅÌÉú Î∞∞ÎÑà */}
        {challengeFailed && (
          <div className="failed-banner">
            üö´ Î£®Ìã¥ Ï±åÎ¶∞ÏßÄ Ïã§Ìå®
          </div>
        )}
        
        <div className="attendance-count">
          {loading ? 'Î°úÎî© Ï§ë...' : `Ïù¥ Îã¨Ïùò Ï∂úÏÑù ÌöüÏàò ${stamps.filter(s => s.date.startsWith(`${viewYear}-${String(viewMonth+1).padStart(2,'0')}`)).length}Ìöå`}
        </div>
        <div className="month-navigation">
          <button onClick={() => moveMonth(-1)} className="month-btn">‚óÄ</button>
          <span className="current-month">{monthStr}</span>
          <button onClick={() => moveMonth(1)} className="month-btn">‚ñ∂</button>
        </div>
        <table className="calendar-table">
          <thead>
            <tr>
              {weekDays.map((w) => (
                <th key={w}>{w}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {matrix.map((week, i) => (
              <tr key={i}>
                {week.map((d, j) => (
                  <td key={j}>
                    {d ? (
                      <div className={`date-circle ${hasStamp(d) ? 'stamped' : 'default'} ${isToday(d) ? 'today' : ''}`}>
                        {hasStamp(d) ? '‚úì' : d}
                        {isToday(d) && (
                          <span className="today-label">Ïò§Îäò</span>
                        )}
                      </div>
                    ) : null}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
        <button
          onClick={handleCheck}
          disabled={checkedToday || loading || challengeFailed}
          className={`check-button ${buttonClicked ? 'clicked' : ''}`}
        >
          Ï∂úÏÑùÏ≤¥ÌÅ¨ÌïòÍ∏∞
        </button>
        {canShowEntry && (
          <button className="entry-button" onClick={() => setShowEntryModal(true)}>
            ÏùëÎ™®ÌïòÎü¨ Í∞ÄÍ∏∞
          </button>
        )}
        
        {/* ÏïåÎ¶º Í∂åÌïú ÏöîÏ≤≠ Î≤ÑÌäº (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå) */}
        {/* {process.env.NODE_ENV !== 'production' && notificationPermission !== 'granted' && (
          <button 
            className="notification-permission-button" 
            onClick={handleRequestNotificationPermission}
          >
            üîî ÏïåÎ¶º Î∞õÍ∏∞
          </button>
        )} */}
        {/* ÏïåÎ¶º ÏÉÅÌÉú/ÌÖåÏä§Ìä∏/Í±∞Î∂Ä Î≤ÑÌäº (Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑúÎßå) */}
        {/* notificationPermission === 'granted' && */}
        {process.env.NODE_ENV !== 'production' &&  (
          <div className="notification-status">
            ‚úÖ ÏïåÎ¶ºÏù¥ ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§
            <div style={{ marginTop: '10px', display: 'flex', gap: '10px', justifyContent: 'center', flexWrap: 'wrap' }}>
              {/* <button 
                className="test-notification-button" 
                onClick={handleSimpleNotification}
                style={{ padding: '5px 10px', fontSize: '12px' }}
              >
                Í∞ÑÎã®ÌÖåÏä§Ìä∏
              </button>
              <button 
                className="test-notification-button" 
                onClick={handleTestNotification}
                style={{ padding: '5px 10px', fontSize: '12px' }}
              >
                SWÌÖåÏä§Ìä∏
              </button> */}
              {/* <button 
                className="test-notification-button" 
                onClick={handleRefreshServiceWorker}
                style={{ padding: '5px 10px', fontSize: '12px' }}
              >
                SW ÏÉàÎ°úÍ≥†Ïπ®
              </button>
              <button 
                className="test-notification-button" 
                onClick={handleCheckNotificationSettings}
                style={{ padding: '5px 10px', fontSize: '12px' }}
              >
                ÏÑ§Ï†ïÌôïÏù∏
              </button> */}
              <button
                className="test-notification-button"
                onClick={handleShowLocalStamps}
                style={{ padding: '5px 10px', fontSize: '12px', background: '#ffe4e8', color: '#ff6b9d' }}
              >
                Î°úÏª¨ Ïä§ÌÉ¨ÌîÑ Ï†ïÎ≥¥ Ï∂úÎ†•
              </button>
              {/* <button
                className="test-notification-button"
                onClick={handleUnsubscribeNotifications}
                style={{ padding: '5px 10px', fontSize: '12px', background: '#ffe4e8', color: '#ff4757' }}
              >
                ÏïåÎ¶º Í±∞Î∂Ä
              </button> */}
              <button
                className="test-notification-button"
                onClick={handleRemoveTodayStamp}
                style={{ padding: '5px 10px', fontSize: '12px', background: '#ffe4e8', color: '#888' }}
              >
                Ïò§Îäò Ï∂úÏÑù ÏÇ≠Ï†ú
              </button>
            </div>
          </div>
        )}
        {message && (
          <div className={`message ${message.includes('Ïã§Ìå®') ? 'failed' : ''}`}>
            {message}
          </div>
        )}
      </header>
      {/* ÏùëÎ™® Î™®Îã¨ */}
      {showEntryModal && (
        <div className="modal-overlay" onClick={() => setShowEntryModal(false)}>
          <div className="entry-modal" onClick={e => e.stopPropagation()}>
            <h2>ÏùëÎ™®ÌïòÍ∏∞</h2>
            <form onSubmit={handleEntrySubmit}>
              <input
                type="tel"
                className="entry-phone-input"
                placeholder="(Ïòà: 01012345678)"
                value={entryPhone}
                onChange={e => setEntryPhone(e.target.value)}
                required
                maxLength={15}
                pattern="[0-9\-]+"
                autoFocus
              />
              <button
                type="submit"
                className="entry-submit-btn"
                disabled={!entryPhone.trim() || entryPhone.length !== 11}
              >
                ÏùëÎ™®ÌïòÍ∏∞
              </button>
            </form>
            <button className="close-modal" onClick={() => setShowEntryModal(false)}>Îã´Í∏∞</button>
          </div>
        </div>
      )}
      {/* ÏùëÎ™® ÏÑ±Í≥µ ÏïàÎÇ¥ Î™®Îã¨ */}
      {showEntrySuccess && (
        <div className="modal-overlay" onClick={() => setShowEntrySuccess(false)}>
          <div className="entry-modal" onClick={e => e.stopPropagation()}>
            <h3>ÏùëÎ™®Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!</h3>
            <p>ÏùëÎ™® Í≤∞Í≥ºÎäî Î¨∏Ïûê Î©îÏÑ∏ÏßÄÎ°ú Ï†ÑÏÜ°Îê©ÎãàÎã§.<br/>Î£®Ìã¥ Ï±åÎ¶∞ÏßÄÎ•º ÏãúÏûëÌïòÏã† Îã¨Ïùò ÎßàÏßÄÎßâ ÎÇ†Ïóê <br/>ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî!</p>
            <button className="close-modal" onClick={() => setShowEntrySuccess(false)}>ÌôïÏù∏</button>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
